(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*Start new process*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : _IO_EM_DI_00 with __MEMO__1___IO_EM_DI_00 *)
__EDTB1 := (_IO_EM_DI_00 AND NOT(__MEMO__1___IO_EM_DI_00)) AND NOT(RUNNING) AND NOT(ERROR) ;
IF __EDTB1 THEN
PROCESS_INDEX := (  0) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;
__EDTB2 := __EDTB1 ;
IF __EDTB2 THEN
(*Set coil*)
RUNNING := TRUE ;
END_IF ;
__EDTB3 := __EDTB1 ;
IF __EDTB3 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0001 ;
__MEMO__1___IO_EM_DI_00 := _IO_EM_DI_00 ; (*Pulse detection on : _IO_EM_DI_00 with __MEMO__1___IO_EM_DI_00 *)


(*************** Rung **********************************)
(*Increment process index*)
__STEPPRAGMA
0,4
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB4 := NEXT_STEP ;
IF __EDTB4 THEN
PROCESS_INDEX := (PROCESS_INDEX + 1) ;
END_IF ;
__MO_PLUS_1 := __EDTB4 ;
__EDTB5 := __EDTB4 ;
IF __EDTB5 THEN
(*Reset coil*)
NEXT_STEP := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0002 ;


(*************** Rung **********************************)
(*Dispense butter*)
__STEPPRAGMA
0,8
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB7 := RUNNING ;
IF __EDTB7 THEN
(* Operator output on : = with __EDTB6 *)
__EDTB6 := (PROCESS_INDEX = IDX_BUTTER) ;
ELSE
__EDTB6 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB6 ;
DISPENSE_BUTTER := __EDTB6 ;
__EDTB8 := __EDTB6 AND BUTTER_DISPENSED ;
IF __EDTB8 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0003 ;


(*************** Rung **********************************)
(*Dispense sugar*)
__STEPPRAGMA
0,12
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := RUNNING ;
IF __EDTB10 THEN
(* Operator output on : = with __EDTB9 *)
__EDTB9 := (PROCESS_INDEX = IDX_SUGAR) ;
ELSE
__EDTB9 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB9 ;
DISPENSE_SUGAR := __EDTB9 ;
__EDTB11 := __EDTB9 AND SUGAR_DISPENSED ;
IF __EDTB11 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0004 ;


(*************** Rung **********************************)
(*Mix_1*)
__STEPPRAGMA
0,16
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB12 := RUNNING ;
__EDTB14 := __EDTB12 ;
IF __EDTB14 THEN
(* Operator output on : = with __EDTB13 *)
__EDTB13 := (PROCESS_INDEX = IDX_MIX_1) ;
ELSE
__EDTB13 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB13 ;
__EDTB15 := __EDTB13 ;
IF __EDTB15 THEN
MIX_TIME := (  RECIPE_MIX_1) ;
END_IF ;
__MO_1GAIN_2 := __EDTB15 ;
__EDTB16 := __EDTB15 ;
__EDTB18 := __EDTB12 ;
IF __EDTB18 THEN
(* Operator output on : = with __EDTB17 *)
__EDTB17 := (PROCESS_INDEX = IDX_MIX_2) ;
ELSE
__EDTB17 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB17 ;
__EDTB19 := __EDTB17 ;
IF __EDTB19 THEN
MIX_TIME := (  RECIPE_MIX_2) ;
END_IF ;
__MO_1GAIN_3 := __EDTB19 ;
__EDTB20 := __EDTB19 ;
__EDTB22 := __EDTB12 ;
IF __EDTB22 THEN
(* Operator output on : = with __EDTB21 *)
__EDTB21 := (PROCESS_INDEX = IDX_MIX_3) ;
ELSE
__EDTB21 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB21 ;
__EDTB23 := __EDTB21 ;
IF __EDTB23 THEN
MIX_TIME := (  RECIPE_MIX_3) ;
END_IF ;
__MO_1GAIN_4 := __EDTB23 ;
__EDTB24 := __EDTB23 ;
__EDTB25 := (__EDTB20 OR __EDTB24) ;
__EDTB26 := (__EDTB16 OR __EDTB25) ;
MIX := __EDTB26 ;
__EDTB27 := __EDTB26 AND MIX_COMPLETE ;
IF __EDTB27 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0005 ;


(*************** Rung **********************************)
(*Dispense eggs, vanilla*)
__STEPPRAGMA
0,26
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB29 := RUNNING ;
IF __EDTB29 THEN
(* Operator output on : = with __EDTB28 *)
__EDTB28 := (PROCESS_INDEX = IDX_EGGS_VANILLA) ;
ELSE
__EDTB28 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB28 ;
DISPENSE_EGGS := __EDTB28 ;
DISPENSE_VANILLA := __EDTB28 ;
__EDTB30 := __EDTB28 AND EGGS_DISPENSED AND VANILLA_DISPENSED ;
IF __EDTB30 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0006 ;


(*************** Rung **********************************)
(*Dispense flour*)
__STEPPRAGMA
0,30
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB32 := RUNNING ;
IF __EDTB32 THEN
(* Operator output on : = with __EDTB31 *)
__EDTB31 := (PROCESS_INDEX = IDX_FLOUR) ;
ELSE
__EDTB31 := FALSE ;
END_IF ;
__MO_EQUAL_7 := __EDTB31 ;
DISPENSE_FLOUR := __EDTB31 ;
__EDTB33 := __EDTB31 AND FLOUR_DISPENSED ;
IF __EDTB33 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0007 ;


(*************** Rung **********************************)
(*Disepnse salt, baking soda*)
__STEPPRAGMA
0,34
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB35 := RUNNING ;
IF __EDTB35 THEN
(* Operator output on : = with __EDTB34 *)
__EDTB34 := (PROCESS_INDEX = IDX_SALT_SODA) ;
ELSE
__EDTB34 := FALSE ;
END_IF ;
__MO_EQUAL_8 := __EDTB34 ;
DISPENSE_SALT := __EDTB34 ;
DISPENSE_SODA := __EDTB34 ;
__EDTB36 := __EDTB34 AND SALT_DISPENSED AND SODA_DISPENSED ;
IF __EDTB36 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0008 ;


(*************** Rung **********************************)
(*Roll into balls on tray*)
__STEPPRAGMA
0,38
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB38 := RUNNING ;
IF __EDTB38 THEN
(* Operator output on : = with __EDTB37 *)
__EDTB37 := (PROCESS_INDEX = IDX_ROLL) ;
ELSE
__EDTB37 := FALSE ;
END_IF ;
__MO_EQUAL_9 := __EDTB37 ;
ROLL := __EDTB37 ;
__EDTB39 := __EDTB37 AND ROLLED ;
IF __EDTB39 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0009 ;


(*************** Rung **********************************)
(*Bake, clean*)
__STEPPRAGMA
0,42
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB41 := RUNNING ;
IF __EDTB41 THEN
(* Operator output on : = with __EDTB40 *)
__EDTB40 := (PROCESS_INDEX = IDX_BAKE) ;
ELSE
__EDTB40 := FALSE ;
END_IF ;
__MO_EQUAL_10 := __EDTB40 ;
BAKE := __EDTB40 ;
CLEAN_BOWL := __EDTB40 ;
__EDTB42 := __EDTB40 AND BAKING_COMPLETE ;
IF __EDTB42 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000A ;


(*************** Rung **********************************)
(*Present*)
__STEPPRAGMA
0,46
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB44 := RUNNING ;
IF __EDTB44 THEN
(* Operator output on : = with __EDTB43 *)
__EDTB43 := (PROCESS_INDEX = IDX_PRESENT) ;
ELSE
__EDTB43 := FALSE ;
END_IF ;
__MO_EQUAL_11 := __EDTB43 ;
PRESENT := __EDTB43 ;
__EDTB45 := __EDTB43 AND PRESENTING_COMPLETE ;
IF __EDTB45 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000B ;


(*************** Rung **********************************)
(*End process once bowl is clean*)
__STEPPRAGMA
0,50
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB47 := RUNNING ;
IF __EDTB47 THEN
(* Operator output on : >= with __EDTB46 *)
__EDTB46 := (PROCESS_INDEX >= IDX_END) ;
ELSE
__EDTB46 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB46 ;
__EDTB48 := __EDTB46 AND BOWL_CLEAN ;
IF __EDTB48 THEN
PROCESS_INDEX := (  0) ;
END_IF ;
__MO_1GAIN_5 := __EDTB48 ;
__EDTB49 := __EDTB48 ;
IF __EDTB49 THEN
(*Reset coil*)
RUNNING := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000C ;


(*************** Rung **********************************)
(*Reset*)
__STEPPRAGMA
0,54
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB50 := _IO_EM_DI_27 ;
IF __EDTB50 THEN
DI_BOWL_WEIGHT := (  C_BOWL_WEIGHT) ;
END_IF ;
__MO_1GAIN_6 := __EDTB50 ;
__EDTB51 := __EDTB50 ;
IF __EDTB51 THEN
PROCESS_INDEX := (  0) ;
END_IF ;
__MO_1GAIN_7 := __EDTB51 ;
__EDTB52 := __EDTB51 ;
IF __EDTB52 THEN
(*Reset coil*)
RUNNING := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000D ;


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __MEMO__1___IO_EM_DI_00 *)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)
(* __EDTB45 *)
(* __EDTB46 *)
(* __EDTB47 *)
(* __EDTB48 *)
(* __EDTB49 *)
(* __EDTB50 *)
(* __EDTB51 *)
(* __EDTB52 *)

