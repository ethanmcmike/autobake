(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*Start new process*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : _IO_EM_DI_00 with __MEMO__1___IO_EM_DI_00 *)
__EDTB1 := (_IO_EM_DI_00 AND NOT(__MEMO__1___IO_EM_DI_00)) AND NOT(RUNNING) ;
IF __EDTB1 THEN
PROCESS_INDEX := (  0) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;
__EDTB2 := __EDTB1 ;
IF __EDTB2 THEN
(*Set coil*)
RUNNING := TRUE ;
END_IF ;
__EDTB3 := __EDTB1 ;
IF __EDTB3 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0001 ;
__MEMO__1___IO_EM_DI_00 := _IO_EM_DI_00 ; (*Pulse detection on : _IO_EM_DI_00 with __MEMO__1___IO_EM_DI_00 *)


(*************** Rung **********************************)
(*Increment process index*)
__STEPPRAGMA
0,4
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB4 := NEXT_STEP ;
IF __EDTB4 THEN
PROCESS_INDEX := (PROCESS_INDEX + 1) ;
END_IF ;
__MO_PLUS_1 := __EDTB4 ;
__EDTB5 := __EDTB4 ;
IF __EDTB5 THEN
(*Reset coil*)
NEXT_STEP := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0002 ;


(*************** Rung **********************************)
(*Dispense butter*)
__STEPPRAGMA
0,8
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB7 := RUNNING ;
IF __EDTB7 THEN
(* Operator output on : = with __EDTB6 *)
__EDTB6 := (PROCESS_INDEX = IDX_BUTTER) ;
ELSE
__EDTB6 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB6 ;
DISPENSE_BUTTER := __EDTB6 ;

(*************** Code for the end of Rung **************)
__GL __LG0003 ;


(*************** Rung **********************************)
(*Initialize dispense butter*)
__STEPPRAGMA
0,12
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : DISPENSE_BUTTER with __MEMO__2__DISPENSE_BUTTER *)
__EDTB8 := (DISPENSE_BUTTER AND NOT(__MEMO__2__DISPENSE_BUTTER)) ;
IF __EDTB8 THEN
(*Reset coil*)
BUTTER_DISPENSED := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0004 ;
__MEMO__2__DISPENSE_BUTTER := DISPENSE_BUTTER ; (*Pulse detection on : DISPENSE_BUTTER with __MEMO__2__DISPENSE_BUTTER *)


(*************** Rung **********************************)
(*Wait for butter dispensing to finish*)
__STEPPRAGMA
0,14
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := RUNNING ;
IF __EDTB10 THEN
(* Operator output on : = with __EDTB9 *)
__EDTB9 := (PROCESS_INDEX = IDX_BUTTER) ;
ELSE
__EDTB9 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB9 ;
__EDTB11 := __EDTB9 AND BUTTER_DISPENSED ;
IF __EDTB11 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0005 ;


(*************** Rung **********************************)
(*Dispense sugar*)
__STEPPRAGMA
0,18
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB13 := RUNNING ;
IF __EDTB13 THEN
(* Operator output on : = with __EDTB12 *)
__EDTB12 := (PROCESS_INDEX = IDX_SUGAR) ;
ELSE
__EDTB12 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB12 ;
DISPENSE_SUGAR := __EDTB12 ;
__EDTB14 := __EDTB12 AND SUGAR_DISPENSED ;
IF __EDTB14 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0006 ;


(*************** Rung **********************************)
(*Initialize dispense sugar*)
__STEPPRAGMA
0,22
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : DISPENSE_SUGAR with __MEMO__3__DISPENSE_SUGAR *)
__EDTB15 := (DISPENSE_SUGAR AND NOT(__MEMO__3__DISPENSE_SUGAR)) ;
IF __EDTB15 THEN
(*Reset coil*)
SUGAR_DISPENSED := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0007 ;
__MEMO__3__DISPENSE_SUGAR := DISPENSE_SUGAR ; (*Pulse detection on : DISPENSE_SUGAR with __MEMO__3__DISPENSE_SUGAR *)


(*************** Rung **********************************)
(*Mix_1*)
__STEPPRAGMA
0,24
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB17 := RUNNING ;
IF __EDTB17 THEN
(* Operator output on : = with __EDTB16 *)
__EDTB16 := (PROCESS_INDEX = IDX_MIX_1) ;
ELSE
__EDTB16 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB16 ;
MIX := __EDTB16 ;
__EDTB18 := __EDTB16 AND MIX_COMPLETE ;
IF __EDTB18 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0008 ;


(*************** Rung **********************************)
(*Clean bowl*)
__STEPPRAGMA
0,28
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB20 := RUNNING ;
IF __EDTB20 THEN
(* Operator output on : = with __EDTB19 *)
__EDTB19 := (PROCESS_INDEX = IDX_CLEAN) ;
ELSE
__EDTB19 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB19 ;
CLEAN_BOWL := __EDTB19 ;

(*************** Code for the end of Rung **************)
__GL __LG0009 ;


(*************** Rung **********************************)
(*Initialize clean bowl*)
__STEPPRAGMA
0,32
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : CLEAN_BOWL with __MEMO__4__CLEAN_BOWL *)
__EDTB21 := RUNNING AND (CLEAN_BOWL AND NOT(__MEMO__4__CLEAN_BOWL)) ;
IF __EDTB21 THEN
(*Reset coil*)
BOWL_CLEAN := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000A ;
__MEMO__4__CLEAN_BOWL := CLEAN_BOWL ; (*Pulse detection on : CLEAN_BOWL with __MEMO__4__CLEAN_BOWL *)


(*************** Rung **********************************)
(*End of Step 5 - Wait for cleaning to finish*)
__STEPPRAGMA
0,34
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB22 := RUNNING AND CLEAN_BOWL AND BOWL_CLEAN ;
IF __EDTB22 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000B ;


(*************** Rung **********************************)
(*End process*)
__STEPPRAGMA
0,36
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB24 := RUNNING ;
IF __EDTB24 THEN
(* Operator output on : >= with __EDTB23 *)
__EDTB23 := (PROCESS_INDEX >= IDX_RESET) ;
ELSE
__EDTB23 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB23 ;
__EDTB25 := __EDTB23 ;
IF __EDTB25 THEN
PROCESS_INDEX := (  0) ;
END_IF ;
__MO_1GAIN_2 := __EDTB25 ;
__EDTB26 := __EDTB25 ;
IF __EDTB26 THEN
(*Reset coil*)
RUNNING := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000C ;


(*************** Rung **********************************)
(*Reset*)
__STEPPRAGMA
0,40
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB27 := _IO_EM_DI_27 ;
IF __EDTB27 THEN
DI_BOWL_WEIGHT := (  C_BOWL_WEIGHT) ;
END_IF ;
__MO_1GAIN_3 := __EDTB27 ;
__EDTB28 := __EDTB27 ;
IF __EDTB28 THEN
PROCESS_INDEX := (  0) ;
END_IF ;
__MO_1GAIN_4 := __EDTB28 ;
__EDTB29 := __EDTB28 ;
IF __EDTB29 THEN
(*Reset coil*)
RUNNING := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000D ;


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __MEMO__1___IO_EM_DI_00 *)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __MEMO__2__DISPENSE_BUTTER *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __MEMO__3__DISPENSE_SUGAR *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __MEMO__4__CLEAN_BOWL *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)

