(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*Start new process*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : _IO_EM_DI_00 with __MEMO__1___IO_EM_DI_00 *)
__EDTB1 := (_IO_EM_DI_00 AND NOT(__MEMO__1___IO_EM_DI_00)) AND NOT(RUNNING) AND NOT(ERROR) ;
IF __EDTB1 THEN
PROCESS_INDEX := (  0) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;
__EDTB2 := __EDTB1 ;
IF __EDTB2 THEN
(*Set coil*)
RUNNING := TRUE ;
END_IF ;
__EDTB3 := __EDTB1 ;
IF __EDTB3 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0001 ;
__MEMO__1___IO_EM_DI_00 := _IO_EM_DI_00 ; (*Pulse detection on : _IO_EM_DI_00 with __MEMO__1___IO_EM_DI_00 *)


(*************** Rung **********************************)
(*Increment process index*)
__STEPPRAGMA
0,4
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB4 := NEXT_STEP ;
IF __EDTB4 THEN
PROCESS_INDEX := (PROCESS_INDEX + 1) ;
END_IF ;
__MO_PLUS_1 := __EDTB4 ;
__EDTB5 := __EDTB4 ;
IF __EDTB5 THEN
(*Reset coil*)
NEXT_STEP := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0002 ;


(*************** Rung **********************************)
(*Dispense butter*)
__STEPPRAGMA
0,8
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB7 := RUNNING ;
IF __EDTB7 THEN
(* Operator output on : = with __EDTB6 *)
__EDTB6 := (PROCESS_INDEX = IDX_BUTTER) ;
ELSE
__EDTB6 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB6 ;
DISPENSE_BUTTER := __EDTB6 ;
__EDTB8 := __EDTB6 AND BUTTER_DISPENSED ;
IF __EDTB8 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0003 ;


(*************** Rung **********************************)
(*Dispense sugar*)
__STEPPRAGMA
0,12
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := RUNNING ;
IF __EDTB10 THEN
(* Operator output on : = with __EDTB9 *)
__EDTB9 := (PROCESS_INDEX = IDX_SUGAR) ;
ELSE
__EDTB9 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB9 ;
DISPENSE_SUGAR := __EDTB9 ;
__EDTB11 := __EDTB9 AND SUGAR_DISPENSED ;
IF __EDTB11 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0004 ;


(*************** Rung **********************************)
(*Mix_1*)
__STEPPRAGMA
0,16
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB12 := RUNNING ;
__EDTB14 := __EDTB12 ;
IF __EDTB14 THEN
(* Operator output on : = with __EDTB13 *)
__EDTB13 := (PROCESS_INDEX = IDX_MIX_1) ;
ELSE
__EDTB13 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB13 ;
__EDTB15 := __EDTB13 ;
IF __EDTB15 THEN
MIX_TIME := (  RECIPE_MIX_1) ;
END_IF ;
__MO_1GAIN_2 := __EDTB15 ;
__EDTB16 := __EDTB15 ;
__EDTB18 := __EDTB12 ;
IF __EDTB18 THEN
(* Operator output on : = with __EDTB17 *)
__EDTB17 := (PROCESS_INDEX = IDX_MIX_2) ;
ELSE
__EDTB17 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB17 ;
__EDTB19 := __EDTB17 ;
IF __EDTB19 THEN
MIX_TIME := (  RECIPE_MIX_2) ;
END_IF ;
__MO_1GAIN_3 := __EDTB19 ;
__EDTB20 := __EDTB19 ;
__EDTB21 := (__EDTB16 OR __EDTB20) ;
MIX := __EDTB21 ;
__EDTB22 := __EDTB21 AND MIX_COMPLETE ;
IF __EDTB22 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0005 ;


(*************** Rung **********************************)
(*Dispense eggs, vanilla*)
__STEPPRAGMA
0,23
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB24 := RUNNING ;
IF __EDTB24 THEN
(* Operator output on : = with __EDTB23 *)
__EDTB23 := (PROCESS_INDEX = IDX_EGGS_VANILLA) ;
ELSE
__EDTB23 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB23 ;
DISPENSE_EGGS := __EDTB23 ;
DISPENSE_VANILLA := __EDTB23 ;
__EDTB25 := __EDTB23 AND EGGS_DISPENSED AND VANILLA_DISPENSED ;
IF __EDTB25 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0006 ;


(*************** Rung **********************************)
(*Clean bowl*)
__STEPPRAGMA
0,27
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB27 := RUNNING ;
IF __EDTB27 THEN
(* Operator output on : = with __EDTB26 *)
__EDTB26 := (PROCESS_INDEX = IDX_CLEAN) ;
ELSE
__EDTB26 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB26 ;
CLEAN_BOWL := __EDTB26 ;
__EDTB28 := __EDTB26 AND BOWL_CLEAN ;
IF __EDTB28 THEN
(*Set coil*)
NEXT_STEP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0007 ;


(*************** Rung **********************************)
(*End of process*)
__STEPPRAGMA
0,31
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB30 := RUNNING ;
IF __EDTB30 THEN
(* Operator output on : >= with __EDTB29 *)
__EDTB29 := (PROCESS_INDEX >= IDX_END) ;
ELSE
__EDTB29 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB29 ;
__EDTB31 := __EDTB29 ;
IF __EDTB31 THEN
PROCESS_INDEX := (  0) ;
END_IF ;
__MO_1GAIN_4 := __EDTB31 ;
__EDTB32 := __EDTB31 ;
IF __EDTB32 THEN
(*Reset coil*)
RUNNING := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0008 ;


(*************** Rung **********************************)
(*Reset*)
__STEPPRAGMA
0,35
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB33 := _IO_EM_DI_27 ;
IF __EDTB33 THEN
DI_BOWL_WEIGHT := (  C_BOWL_WEIGHT) ;
END_IF ;
__MO_1GAIN_5 := __EDTB33 ;
__EDTB34 := __EDTB33 ;
IF __EDTB34 THEN
PROCESS_INDEX := (  0) ;
END_IF ;
__MO_1GAIN_6 := __EDTB34 ;
__EDTB35 := __EDTB34 ;
IF __EDTB35 THEN
(*Reset coil*)
RUNNING := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0009 ;


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __MEMO__1___IO_EM_DI_00 *)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)

