(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*Tare - store bowl weight measurement*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := TARE ;
IF __EDTB1 THEN
TARE_WEIGHT := (  DI_BOWL_WEIGHT) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;
__EDTB2 := __EDTB1 ;
IF __EDTB2 THEN
RELATIVE_WEIGHT := (DI_BOWL_WEIGHT - TARE_WEIGHT) ;
END_IF ;
__MO_MINUS_1 := __EDTB2 ;
__EDTB3 := __EDTB2 ;
IF __EDTB3 THEN
(*Reset coil*)
TARE := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0001 ;


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,5
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : DISPENSE_BUTTER with __MEMO__1__DISPENSE_BUTTER *)
__EDTB4 := (DISPENSE_BUTTER AND NOT(__MEMO__1__DISPENSE_BUTTER)) ;
IF __EDTB4 THEN
(*Set coil*)
TARE := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0002 ;
__MEMO__1__DISPENSE_BUTTER := DISPENSE_BUTTER ; (*Pulse detection on : DISPENSE_BUTTER with __MEMO__1__DISPENSE_BUTTER *)


(*************** Rung **********************************)
(*Wait for taring to dispense butter*)
__STEPPRAGMA
0,7
__ENDSTEPPRAGMA
(*Label :*)(**)
_IO_EM_DO_00 := DISPENSE_BUTTER AND NOT(TARE) ;

(*************** Code for the end of Rung **************)
__GL __LG0003 ;


(*************** Rung **********************************)
(*Detect butter dispensed by weight - at least 10g increase*)
__STEPPRAGMA
0,9
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB6 := DISPENSE_BUTTER AND NOT(TARE) ;
IF __EDTB6 THEN
(* Operator output on : > with __EDTB5 *)
__EDTB5 := (RELATIVE_WEIGHT > 10.0) ;
ELSE
__EDTB5 := FALSE ;
END_IF ;
__MO_GREAT_1 := __EDTB5 ;
__EDTB7 := __EDTB5 ;
IF __EDTB7 THEN
(*Set coil*)
BUTTER_DISPENSED := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0004 ;


(*************** Rung **********************************)
(*Initialize dispense sugar*)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : DISPENSE_SUGAR with __MEMO__2__DISPENSE_SUGAR *)
__EDTB8 := (DISPENSE_SUGAR AND NOT(__MEMO__2__DISPENSE_SUGAR)) ;
IF __EDTB8 THEN
(*Set coil*)
TARE := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0005 ;
__MEMO__2__DISPENSE_SUGAR := DISPENSE_SUGAR ; (*Pulse detection on : DISPENSE_SUGAR with __MEMO__2__DISPENSE_SUGAR *)


(*************** Rung **********************************)
(*Wait for taring to dispense sugar*)
__STEPPRAGMA
0,15
__ENDSTEPPRAGMA
(*Label :*)(**)
_IO_EM_DO_01 := DISPENSE_SUGAR AND NOT(TARE) ;

(*************** Code for the end of Rung **************)
__GL __LG0006 ;


(*************** Rung **********************************)
(*Detect sugar dispensed by weight*)
__STEPPRAGMA
0,17
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := DISPENSE_SUGAR AND NOT(TARE) ;
IF __EDTB10 THEN
(* Operator output on : >= with __EDTB9 *)
__EDTB9 := (RELATIVE_WEIGHT >= RECIPE_SUGAR) ;
ELSE
__EDTB9 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB9 ;
__EDTB11 := __EDTB9 ;
IF __EDTB11 THEN
(*Set coil*)
SUGAR_DISPENSED := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0007 ;


(*************** Rung **********************************)
(*Initialize dispense vanilla*)
__STEPPRAGMA
0,21
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : _IO_EM_DO_02 with __MEMO__3___IO_EM_DO_02 *)
__EDTB12 := (_IO_EM_DO_02 AND NOT(__MEMO__3___IO_EM_DO_02)) ;
IF __EDTB12 THEN
VANILLA_COUNT := (  0) ;
END_IF ;
__MO_1GAIN_2 := __EDTB12 ;
__EDTB13 := __EDTB12 ;
IF __EDTB13 THEN
(*Reset coil*)
VANILLA_DISPENSED := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0008 ;
__MEMO__3___IO_EM_DO_02 := _IO_EM_DO_02 ; (*Pulse detection on : _IO_EM_DO_02 with __MEMO__3___IO_EM_DO_02 *)


(*************** Rung **********************************)
(*Simulate vanilla drop actuator output pulse*)
__STEPPRAGMA
0,24
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
TON_6(DI_VANILLA_DROP, T#250MS) ;
__EDTB14 := TON_6.Q ;
IF __EDTB14 THEN
(*Reset coil*)
DI_VANILLA_DROP := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0009 ;


(*************** Rung **********************************)
(*Count number of vanilla drops dispensed based on actuator output signal*)
__STEPPRAGMA
0,27
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : DI_VANILLA_DROP with __MEMO__4__DI_VANILLA_DROP *)
__EDTB15 := _IO_EM_DO_02 AND (DI_VANILLA_DROP AND NOT(__MEMO__4__DI_VANILLA_DROP)) ;
IF __EDTB15 THEN
VANILLA_COUNT := (VANILLA_COUNT + 1) ;
END_IF ;
__MO_PLUS_1 := __EDTB15 ;

(*************** Code for the end of Rung **************)
__GL __LG000A ;
__MEMO__4__DI_VANILLA_DROP := DI_VANILLA_DROP ; (*Pulse detection on : DI_VANILLA_DROP with __MEMO__4__DI_VANILLA_DROP *)


(*************** Rung **********************************)
(*Stop dispensing vanilla when recipe drop count reached*)
__STEPPRAGMA
0,31
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB17 := _IO_EM_DO_02 ;
IF __EDTB17 THEN
(* Operator output on : >= with __EDTB16 *)
__EDTB16 := (VANILLA_COUNT >= RECIPE_VANILLA) ;
ELSE
__EDTB16 := FALSE ;
END_IF ;
__MO_GREATEQUAL_2 := __EDTB16 ;
__EDTB18 := __EDTB16 ;
IF __EDTB18 THEN
(*Reset coil*)
_IO_EM_DO_02 := FALSE ;
END_IF ;
__EDTB19 := __EDTB16 ;
IF __EDTB19 THEN
(*Set coil*)
VANILLA_DISPENSED := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000B ;


(*************** Rung **********************************)
(*Mix for 10s*)
__STEPPRAGMA
0,35
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
TON_5(MIX, T#10S) ;
__EDTB20 := TON_5.Q ;
IF __EDTB20 THEN
(*Reset coil*)
MIX := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000C ;


(*************** Rung **********************************)
(*Dispense flour until weight reached*)
__STEPPRAGMA
0,38
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB22 := _IO_EM_DO_07 ;
IF __EDTB22 THEN
(* Operator output on : >= with __EDTB21 *)
__EDTB21 := (FLOUR_WEIGHT >= FLOUR_NEEDED) ;
ELSE
__EDTB21 := FALSE ;
END_IF ;
__MO_GREATEQUAL_3 := __EDTB21 ;
__EDTB23 := __EDTB21 ;
IF __EDTB23 THEN
(*Reset coil*)
NEXT_STEP := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000D ;


(*************** Rung **********************************)
(*Simulate dispensing flour*)
__STEPPRAGMA
0,42
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
TON_2(_IO_EM_DO_07, T#500MS) ;
__EDTB24 := TON_2.Q ;
IF __EDTB24 THEN
DI_BOWL_WEIGHT := (DI_BOWL_WEIGHT + 0.1) ;
END_IF ;
__MO_PLUS_2 := __EDTB24 ;

(*************** Code for the end of Rung **************)
__GL __LG000E ;


(*************** Rung **********************************)
(*Clean bowl*)
__STEPPRAGMA
0,46
__ENDSTEPPRAGMA
(*Label :*)(**)
_IO_EM_DO_09 := CLEAN_BOWL ;

(*************** Code for the end of Rung **************)
__GL __LG000F ;


(*************** Rung **********************************)
(*Clean bowl for 5s*)
__STEPPRAGMA
0,48
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
TON_1(CLEAN_BOWL, T#5S) ;
__EDTB25 := TON_1.Q ;
IF __EDTB25 THEN
(*Set coil*)
BOWL_CLEAN := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0010 ;


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __MEMO__1__DISPENSE_BUTTER *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __MEMO__2__DISPENSE_SUGAR *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __MEMO__3___IO_EM_DO_02 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __MEMO__4__DI_VANILLA_DROP *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)

