(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*Initialize full egg carton*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := __SYSVA_FIRST_SCAN ;
IF __EDTB1 THEN
STOCK_EGGS := (  C_EGGS_MAX) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;

(*************** Code for the end of Rung **************)
__GL __LG0001 ;


(*************** Rung **********************************)
(*Initialize dispense eggs*)
__STEPPRAGMA
0,4
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : DISPENSE_EGGS with __MEMO__1__DISPENSE_EGGS *)
__EDTB2 := (DISPENSE_EGGS AND NOT(__MEMO__1__DISPENSE_EGGS)) ;
IF __EDTB2 THEN
PULSE_OUT_COUNT := (  0) ;
END_IF ;
__MO_1GAIN_2 := __EDTB2 ;

(*************** Code for the end of Rung **************)
__GL __LG0002 ;
__MEMO__1__DISPENSE_EGGS := DISPENSE_EGGS ; (*Pulse detection on : DISPENSE_EGGS with __MEMO__1__DISPENSE_EGGS *)


(*************** Rung **********************************)
(*Delay timer waiting for eggs to dispense*)
__STEPPRAGMA
0,7
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
TON_4(DISPENSE_EGGS, EGG_DISPENSE_DELAY) ;
EGGS_DISPENSED := TON_4.Q ;

(*************** Code for the end of Rung **************)
__GL __LG0003 ;


(*************** Rung **********************************)
(*Generate a pulse with a high per number of eggs needed, low to high*)
__STEPPRAGMA
0,10
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB4 := DISPENSE_EGGS AND NOT(EGG_PULSE_STATE) ;
IF __EDTB4 THEN
(* Operator output on : < with __EDTB3 *)
__EDTB3 := (PULSE_OUT_COUNT < RECIPE_EGGS) ;
ELSE
__EDTB3 := FALSE ;
END_IF ;
__MO_LESS_1 := __EDTB3 ;
(* FB call: TON *)
TON_2(__EDTB3, T#250MS) ;
__EDTB5 := TON_2.Q ;
IF __EDTB5 THEN
PULSE_OUT_COUNT := (PULSE_OUT_COUNT + 1) ;
END_IF ;
__MO_PLUS_1 := __EDTB5 ;
__EDTB6 := __EDTB5 ;
IF __EDTB6 THEN
(*Set coil*)
EGG_PULSE_STATE := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0004 ;


(*************** Rung **********************************)
(*Pulse high to low*)
__STEPPRAGMA
0,14
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
TON_1(EGG_PULSE_STATE, T#250MS) ;
__EDTB7 := TON_1.Q ;
IF __EDTB7 THEN
(*Reset coil*)
EGG_PULSE_STATE := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0005 ;


(*************** Rung **********************************)
(*Reduce egg stock for every pulse sent*)
__STEPPRAGMA
0,17
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : EGG_PULSE_STATE with __MEMO__2__EGG_PULSE_STATE *)
__EDTB8 := (EGG_PULSE_STATE AND NOT(__MEMO__2__EGG_PULSE_STATE)) ;
IF __EDTB8 THEN
STOCK_EGGS := (STOCK_EGGS - 1) ;
END_IF ;
__MO_MINUS_1 := __EDTB8 ;

(*************** Code for the end of Rung **************)
__GL __LG0006 ;
__MEMO__2__EGG_PULSE_STATE := EGG_PULSE_STATE ; (*Pulse detection on : EGG_PULSE_STATE with __MEMO__2__EGG_PULSE_STATE *)


(*************** Rung **********************************)
(*Send pulse to dispenser*)
__STEPPRAGMA
0,21
__ENDSTEPPRAGMA
(*Label :*)(**)
_IO_EM_DO_03 := EGG_PULSE_STATE ;

(*************** Code for the end of Rung **************)
__GL __LG0007 ;


(*************** Rung **********************************)
(*Count number of pulses received*)
__STEPPRAGMA
0,23
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : _IO_EM_DO_03 with __MEMO__3___IO_EM_DO_03 *)
__EDTB9 := (_IO_EM_DO_03 AND NOT(__MEMO__3___IO_EM_DO_03)) ;
IF __EDTB9 THEN
PULSE_IN_COUNT := (PULSE_IN_COUNT + 1) ;
END_IF ;
__MO_PLUS_2 := __EDTB9 ;

(*************** Code for the end of Rung **************)
__GL __LG0008 ;
__MEMO__3___IO_EM_DO_03 := _IO_EM_DO_03 ; (*Pulse detection on : _IO_EM_DO_03 with __MEMO__3___IO_EM_DO_03 *)


(*************** Rung **********************************)
(*Dispense egg if pulse count >0*)
__STEPPRAGMA
0,27
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB11 := NOT(DISPENSING_EGG) ;
IF __EDTB11 THEN
(* Operator output on : >= with __EDTB10 *)
__EDTB10 := (PULSE_IN_COUNT >= 0) ;
ELSE
__EDTB10 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB10 ;
__EDTB12 := __EDTB10 ;
IF __EDTB12 THEN
PULSE_IN_COUNT := (PULSE_IN_COUNT - 1) ;
END_IF ;
__MO_MINUS_2 := __EDTB12 ;
__EDTB13 := __EDTB12 ;
IF __EDTB13 THEN
(*Set coil*)
DISPENSING_EGG := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG0009 ;


(*************** Rung **********************************)
(*Simulate dispensing egg over 2s*)
__STEPPRAGMA
0,31
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
TON_3(DISPENSING_EGG, C_EGG_DISPENSE_TIME) ;
__EDTB14 := TON_3.Q ;
IF __EDTB14 THEN
DI_BOWL_WEIGHT := (DI_BOWL_WEIGHT + C_EGG_WEIGHT) ;
END_IF ;
__MO_PLUS_3 := __EDTB14 ;
__EDTB15 := __EDTB14 ;
IF __EDTB15 THEN
(*Reset coil*)
DISPENSING_EGG := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)
__GL __LG000A ;


(*************** Rung **********************************)
(*Low eggs warning*)
__STEPPRAGMA
0,35
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB17 := TRUE ;
IF __EDTB17 THEN
(* Operator output on : <= with __EDTB16 *)
__EDTB16 := (STOCK_EGGS <= 2) ;
ELSE
__EDTB16 := FALSE ;
END_IF ;
__MO_LESSEQUAL_1 := __EDTB16 ;
WARN_EGGS_LOW := __EDTB16 ;

(*************** Code for the end of Rung **************)
__GL __LG000B ;


(*************** Rung **********************************)
(*Empty eggs error*)
__STEPPRAGMA
0,39
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB19 := TRUE ;
IF __EDTB19 THEN
(* Operator output on : = with __EDTB18 *)
__EDTB18 := (STOCK_EGGS = 0) ;
ELSE
__EDTB18 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB18 ;
ERROR_EGGS_EMPTY := __EDTB18 ;

(*************** Code for the end of Rung **************)
__GL __LG000C ;


(*************** Rung **********************************)
(*Restock eggs to full*)
__STEPPRAGMA
0,43
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB20 := _IO_EM_DI_02 ;
IF __EDTB20 THEN
STOCK_EGGS := (  C_EGGS_MAX) ;
END_IF ;
__MO_1GAIN_3 := __EDTB20 ;

(*************** Code for the end of Rung **************)
__GL __LG000D ;


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __MEMO__1__DISPENSE_EGGS *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __MEMO__2__EGG_PULSE_STATE *)
(* __EDTB8 *)
(* __MEMO__3___IO_EM_DO_03 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)

